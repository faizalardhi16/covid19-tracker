{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid19_logo.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","lable","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","images","src","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1e787f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2AEQc\",\"card\":\"Cards_card__2dmID\",\"infected\":\"Cards_infected__3yw-i\",\"recovered\":\"Cards_recovered__3T4f8\",\"deaths\":\"Cards_deaths__xBugN\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames'\r\n\r\nexport default function Cards({ data: { confirmed, recovered, deaths, lastUpdate } }) {\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}   \r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\tlet changeableUrl = url;\r\n\r\n\tif (country) {\r\n\t\tchangeableUrl = `${url}/countries/${country}`;\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst {\r\n\t\t\tdata: { confirmed, recovered, deaths, lastUpdate },\r\n\t\t} = await axios.get(changeableUrl);\r\n\r\n\t\treturn {\r\n\t\t\tconfirmed,\r\n\t\t\trecovered,\r\n\t\t\tdeaths,\r\n\t\t\tlastUpdate,\r\n\t\t};\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n\ttry {\r\n\t\tconst { data } = await axios.get(`${url}/daily`);\r\n\t\tconst modifiedData = data.map((dailyData) => ({\r\n\t\t\tconfirmed: dailyData.confirmed.total,\r\n\t\t\tdeaths: dailyData.deaths.total,\r\n\t\t\tdate: dailyData.reportDate,\r\n\t\t}));\r\n\r\n\t\treturn modifiedData;\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n\ttry {\r\n\t\tconst {\r\n\t\t\tdata: { countries },\r\n\t\t} = await axios.get(`${url}/countries`);\r\n\r\n\t\treturn countries.map((country) => country.name);\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nexport default function Chart({data:{ confirmed, recovered, deaths}, country}) {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI();\r\n    },[]);\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n            <Line\r\n                data={{\r\n                    labels: dailyData.map(({ date })=> date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill:true,\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor:'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n                        fill:true,\r\n                    }],\r\n                }}\r\n            />\r\n            ) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        lable: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0,0,255,0.5)',\r\n                            'rgba(0,255,0,0.5)',\r\n                            'rgba(255,0,0,0.5)',\r\n                        ],\r\n                        data:[confirmed.value, recovered.value, deaths.value]\r\n                    }],\r\n                }}\r\n\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current state in ${country}` },\r\n                }}\r\n            />\r\n        ) : ''\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nexport default function CountryPicker({handleCountryChange}) {\r\n    const [fetchedCountries, setFetchCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    \r\n    }, [setFetchCountries])\r\n   \r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) =>\r\n                    <option key={i} value={country}>{country}</option>)\r\n                }\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/covid19_logo.d2909308.png\";","import React, { Component } from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport images from './images/covid19_logo.png';\r\n\r\nexport default class App extends Component {\r\n\tstate = {\r\n\t\tdata: {},\r\n\t\tcountry: '',\r\n\t};\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst fetchedData = await fetchData();\r\n\t\tthis.setState({ data: fetchedData });\r\n\t}\r\n\r\n\thandleCountryChange = async (country) => {\r\n\t\tconst fetchedData = await fetchData(country);\r\n\t\tthis.setState({ data: fetchedData, country: country });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { data, country } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className={styles.container}>\r\n\t\t\t\t<img className={styles.images} src={images} alt=\"COVID-19\" />\r\n\t\t\t\t<Cards data={data} />\r\n\t\t\t\t<CountryPicker handleCountryChange={this.handleCountryChange} />\r\n\t\t\t\t<Chart data={data} country={country} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__FQxuu\",\"images\":\"App_images__1qDtN\",\"image\":\"App_image__1f2rQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__8LWPy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__26M5D\"};"],"sourceRoot":""}